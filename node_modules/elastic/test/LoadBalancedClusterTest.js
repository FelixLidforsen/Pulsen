process.env.JAVA_HOME = '/System/Library/Frameworks/JavaVM.framework/Home/'; 
process.env.EC2_PRIVATE_KEY = __dirname + '/keys/pk-TQ2TH4KSYVEHHGJJG5KMQX5PLU662GQA.pem';
process.env.EC2_CERT = __dirname + '/keys/cert-TQ2TH4KSYVEHHGJJG5KMQX5PLU662GQA.pem';


var assert = require( 'assert' );
var async = require( 'async' );

describe( 'Ec2Client', function() {
	describe( 'getSecurityGroups', function() {
		this.timeout( 10000 );
		var elastic = new( require( '../index.js' ))();
		it( 'should return data about the running instances', function( done ) {
			elastic.getEc2Client().getSecurityGroups( 'us-east-1', function( error, result ) {
				assert.equal( null, error );
				console.log( result );

				/* 
						[ { instance: 'i-37211948',
						    ami: 'ami-3d4ff254',
						    external: 'ec2-50-16-82-212.compute-1.amazonaws.com',
						    internal: 'ip-10-144-5-154.ec2.internal',
						    type: 'm1.small',
						    zone: 'us-east-1b' },
						  { instance: 'i-18e2836b',
						    ami: 'ami-0d3aba64',
						    external: 'ec2-23-22-26-181.compute-1.amazonaws.com',
						    internal: 'domU-12-31-39-0A-49-B7.compute-1.internal',
						    type: 't1.micro',
						    zone: 'us-east-1a' } ]
						    */
				done();
			});
		});
	});
});

describe( 'ProcessingCluster', function() {
	describe( 'when started', function() {
		it( 'reports its DNS', function( done ) {
			var elastic = new( require( '../index.js' ))();
			var mockClient = new( require( './mocks/MockEc2Client' ))();
			elastic.setEc2Client( mockClient );

			var cluster = elastic.LoadBalancedCluster( 
			    {
			        'region': 'us-east-1',
			        'zones': [ 'us-east-1a', 'us-east-1b', 'us-east-1d' ],
			        'name': 'test-lb-cluster',
			        'ami': 'ami-0d3aba64',  
			        'securityGroup': 'test-cluster-group',
			        'firewallAllow': [
			            {
			                'port': 80,
			                'subnet': '0.0.0.0/0',
			                // 'group': 'sg-4251245',
			            },
			        ],
			        'externalPort': 80,
			        'internalPort': 80,
			        'protocol': 'http',
			        'keypair': 'Nova-Util',
			        'type': 't1.micro'
			    }
			);
			cluster.start( function( error, clusterDns ) {
				assert.equal( error, null );
				assert.ok( clusterDns );
				done();
			});
		} );
	} );
});
